/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * VolumesPanel.java
 *
 * Created on Aug 18, 2010, 9:52:22 AM
 */
package volumeCalculator;

import ij.IJ;
import ij.gui.ColorChooser;
import ij3d.Image3DUniverse;
import java.awt.Button;
import java.awt.Checkbox;
import java.awt.CheckboxGroup;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.Label;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author pcmarks
 */
public class VolumesPanel extends java.awt.Panel {

    static final Color FIRST_VOLUME_COLOR = Color.RED;
    private final GridBagConstraints constraints;
    private ColorChooser colorChooser;
    /** Where all the values for the different colored volumes are kept.*/
    private Volumes volumes;
    private CheckboxGroup checkboxGroup;
    private List<Label> volumeLabels;
    private AnalyzedGraph analyzedGraph;
    private Image3DUniverse universe;

    /** Creates new form VolumesPanel */
    public VolumesPanel(Volumes volumes, AnalyzedGraph analyzedGraph, Image3DUniverse universe) {

        this.volumes = volumes;
        this.analyzedGraph = analyzedGraph;
        this.universe = universe;

        initComponents();

        volumeUnitsLabel.setText("Volume in cubic " + volumes.getCalibrationUnits());

        volumeLabels = new ArrayList<Label>();

        checkboxGroup = new CheckboxGroup(); // Used for radio buttom behavior

        constraints = new GridBagConstraints();
        Label Fill = new Label("");
        constraints.gridx = 0;
        constraints.gridy = 0;
        constraints.gridwidth = 3;
        volumesPanel.add(Fill, constraints);

        // Initialize the volumes display with a color.
        volumes.addVolumeColor(FIRST_VOLUME_COLOR);
        addVolumeDisplayLine(FIRST_VOLUME_COLOR, true);
        scrollPane1.validate();
        validate();


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        volumeUnitsLabel = new java.awt.Label();
        scrollPane1 = new java.awt.ScrollPane();
        volumesPanel = new java.awt.Panel();
        panel1 = new java.awt.Panel();
        statusLabel = new java.awt.Label();
        boundingBoxCheckbox = new java.awt.Checkbox();
        addColorVolumeButton = new java.awt.Button();

        setLayout(new java.awt.BorderLayout());

        volumeUnitsLabel.setAlignment(java.awt.Label.CENTER);
        volumeUnitsLabel.setText("Volume in ");
        add(volumeUnitsLabel, java.awt.BorderLayout.NORTH);

        volumesPanel.setLayout(new java.awt.GridBagLayout());
        scrollPane1.add(volumesPanel);

        add(scrollPane1, java.awt.BorderLayout.CENTER);

        statusLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        statusLabel.setText("                                  ");
        panel1.add(statusLabel);

        boundingBoxCheckbox.setLabel("Bounding Box ");
        boundingBoxCheckbox.setName("boundingBoxCheckBox"); // NOI18N
        boundingBoxCheckbox.setState(true);
        boundingBoxCheckbox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                boundingBoxCheckboxItemStateChanged(evt);
            }
        });
        panel1.add(boundingBoxCheckbox);

        addColorVolumeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addColorVolumeButton.setLabel("New Volume Color");
        addColorVolumeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addColorVolumeButtonActionPerformed(evt);
            }
        });
        panel1.add(addColorVolumeButton);
        addColorVolumeButton.getAccessibleContext().setAccessibleName("");

        add(panel1, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void addColorVolumeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addColorVolumeButtonActionPerformed
        colorChooser = new ColorChooser("Volume Color Chooser", Color.white, false);
        Color chosenColor = colorChooser.getColor();
        if (chosenColor != null) {
            if (!volumes.addVolumeColor(chosenColor)) {
                IJ.showMessage("This color is already being used. Please try another one.");
            } else {
                // construct a new line for showing the volume value
                addVolumeDisplayLine(chosenColor, true);    // New volume is checked
            }
        }
    }//GEN-LAST:event_addColorVolumeButtonActionPerformed

    private void boundingBoxCheckboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_boundingBoxCheckboxItemStateChanged
        if (boundingBoxCheckbox.getState()) {
            universe.setShowBoundingBoxUponSelection(true);
        } else {
            universe.setShowBoundingBoxUponSelection(false);
        }

    }//GEN-LAST:event_boundingBoxCheckboxItemStateChanged

    private void addVolumeDisplayLine(Color chosenColor, boolean isOn) {
        constraints.insets = new Insets(1, 1, 6, 1);
        constraints.gridx = 0;
        constraints.gridy++;
        constraints.gridwidth = 1;

        // Checkbox (radio button) to select a volume
        // Its name is the index into the volumes table
        Checkbox checkbox = new Checkbox("", checkboxGroup, isOn);
        checkbox.setName("" + volumes.getCurrentColorIndex());

        // When checkbox is clicked change the index to the selected color
        // The name field of the checkbox is the index - stringified.
        checkbox.addItemListener(new ItemListener() {

            public void itemStateChanged(ItemEvent ie) {
                Checkbox checkbox = (Checkbox) ie.getSource();
                int parseInt = Integer.parseInt(checkbox.getName());
                volumes.setCurrentColorIndex(parseInt);
            }
        });

        Dimension size = volumesPanel.getSize();
        volumesPanel.add(checkbox, constraints);
        Label label00 = new Label("       ");
        label00.setBackground(chosenColor);
        constraints.gridx++;
        volumesPanel.add(label00, constraints);
        Label volumeLabel = new Label("                  ");
        constraints.gridx++;
        // Retain this instance of a Label for use when displaying.
        volumesPanel.add(volumeLabel, constraints);
        Button clearButton = new Button("C");             // A Clear button
        // The action "command" is the colorIndex for this color
        clearButton.setActionCommand("" + volumes.getCurrentColorIndex());
        clearButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
                int colorIndex = Integer.parseInt(ae.getActionCommand());
                analyzedGraph.resetColor(volumes.getColorAt(colorIndex));
                volumes.clearVoxelCount(colorIndex);
                updateVoxelCount(colorIndex);
            }
        });
        constraints.gridx++;
        volumesPanel.add(clearButton, constraints);
        volumesPanel.setSize(size);
        validate();
        // Move the scrool window to the bottom to show the new volume color
        scrollPane1.setScrollPosition(600, 600);        // 600 = extreme value?

        // Keep track of the volumeLabels. These are where the volume totals
        // are displayed.
        volumeLabels.add(volumeLabel);

    }

    /**
     * Re show the volume amount for this volume color
     *
     * @param colorIndex
     */
    void updateVoxelCount(int colorIndex) {
        if (colorIndex == UserData.INITIAL_COLOR_INDEX) {
            return;
        }
        String text = String.format(" %9.2f ", volumes.getVolumeAt(colorIndex));
        Label label = volumeLabels.get(colorIndex);
        label.setText(text);
    }

    /**
     * Display a message in the Volumes Panel
     *
     * @param message
     */
    void showStatus(String message) {
        statusLabel.setText(message);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button addColorVolumeButton;
    private java.awt.Checkbox boundingBoxCheckbox;
    private java.awt.Panel panel1;
    private java.awt.ScrollPane scrollPane1;
    private java.awt.Label statusLabel;
    private java.awt.Label volumeUnitsLabel;
    private java.awt.Panel volumesPanel;
    // End of variables declaration//GEN-END:variables
}
